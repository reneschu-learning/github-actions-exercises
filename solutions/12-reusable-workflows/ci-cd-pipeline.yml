name: Vollständige CI/CD-Pipeline mit wiederverwendbaren Workflows

run-name: Deployment nach ${{ github.event.inputs.environment || 'development' }} ausgelöst von ${{ github.event_name == 'workflow_dispatch' && github.actor || format('Push von {0} ({1})', github.event.pusher.name, github.sha) }}

on:
  push:
    branches: [ main ]
    paths-ignore: [ '.github/**' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment for deployment'
        required: true
        type: choice
        options:
          - development
          - production
        default: 'development'

env:
  SOLUTION_PATH: './exercises/09-full-ci-cd-pipeline/sample-app/SampleApp.sln'
  PROJECT_PATH: './exercises/09-full-ci-cd-pipeline/sample-app/SampleApp/SampleApp.csproj'
  TEST_PROJECT_PATH: './exercises/09-full-ci-cd-pipeline/sample-app/SampleApp.Tests/SampleApp.Tests.csproj'

jobs:
  build:
    name: "🔨 Anwendung bauen"
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        dotnet-version: ['8.0.x', '9.0.x']
    
    steps:
      - name: "📥 Code auschecken"
        uses: actions/checkout@v4
      
      - name: "🔧 .NET ${{ matrix.dotnet-version }} einrichten"
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
      
      - name: "📦 Abhängigkeiten wiederherstellen"
        run: dotnet restore ${{ env.SOLUTION_PATH }}
      
      - name: "🔨 Anwendung bauen"
        run: dotnet build ${{ env.SOLUTION_PATH }} --configuration Release --no-restore

      - name: "🧪 Unittests ausführen"
        run: |
          dotnet test ${{ env.TEST_PROJECT_PATH }} \
            --configuration Release \
            --logger "trx;LogFileName=test-results.trx" \
            --collect:"XPlat Code Coverage" \
            --results-directory TestResults/
      
      - name: "📊 Testergebnisse veröffentlichen"
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.dotnet-version }}
          path: TestResults/
          retention-days: 1
      
      - name: "📈 Testzusammenfassung anzeigen"
        run: |
          echo "🧪 Testzusammenfassung für .NET ${{ matrix.dotnet-version }}"
          echo "Testdateien befinden sich im TestResults-Verzeichnis"
          find TestResults -name "*.trx" -exec echo "Gefundene Testergebnisdatei: {}" \;
      - name: "📤 Build-Artefakte hochladen"
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.dotnet-version }}
          path: |
            exercises/09-full-ci-cd-pipeline/sample-app/SampleApp/bin/Release/
            exercises/09-full-ci-cd-pipeline/sample-app/SampleApp.Tests/bin/Release/
          retention-days: 1

  package:
    name: "📦 Anwendung paketieren"
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    
    steps:
      - name: "📥 Code auschecken"
        uses: actions/checkout@v4
      
      - name: "🔧 .NET einrichten"
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      
      - name: "📦 Anwendung veröffentlichen"
        run: |
          dotnet publish ${{ env.PROJECT_PATH }} \
            --configuration Release \
            --output ./publish \
            --self-contained false
      
      - name: "📋 Deployment-Paket erstellen"
        run: |
          # Versionsinfo erstellen
          echo "Build-Informationen" > ./publish/build-info.txt
          echo "==================" >> ./publish/build-info.txt
          echo "Build-Datum: $(date)" >> ./publish/build-info.txt
          echo "Commit SHA: ${{ github.sha }}" >> ./publish/build-info.txt
          echo "Branch: ${{ github.ref_name }}" >> ./publish/build-info.txt
          echo "Akteur: ${{ github.actor }}" >> ./publish/build-info.txt
          echo "Workflow: ${{ github.workflow }}" >> ./publish/build-info.txt
      - name: "📤 Deployment-Paket hochladen"
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: ./publish/
          retention-days: 30

  deploy-dev:
    name: "🚀 Deployment nach Entwicklung"
    uses: ./.github/workflows/reusable-deploy.yml
    needs: package
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
    with:
      environment: ${{ github.event.inputs.environment || 'development' }}
      package-name: 'deployment-package'
      app-url: 'https://dev-sampleapp.example.com'
      is-production: false
    secrets: inherit

  deploy-prod:
    name: "🏭 Deployment nach Produktion"
    uses: ./.github/workflows/reusable-deploy.yml
    needs: deploy-dev
    if: github.ref == 'refs/heads/main' && github.event.inputs.environment == 'production'
    permissions:
      contents: write
    with:
      environment: 'production'
      package-name: 'deployment-package'
      app-url: 'https://sampleapp.example.com'
      is-production: true
    secrets: inherit

  notify:
    name: "📢 Deployment-Status benachrichtigen"
    runs-on: ubuntu-latest
    needs: [ deploy-dev, deploy-prod ]
    if: always() && (needs.deploy-dev.result != 'skipped' || needs.deploy-prod.result != 'skipped')
    
    steps:
      - name: "📢 Benachrichtigung senden"
        run: |
          echo "📧 Deployment-Benachrichtigungen werden gesendet..."
          # Entwicklung-Benachrichtigung
          if [ "${{ needs.deploy-dev.result }}" != 'skipped' ]; then
            if [ ${{ needs.deploy-dev.outputs.deployment-status }} ]; then
              echo "✅ Entwicklung-Deployment erfolgreich"
            else
              echo "❌ Entwicklung-Deployment fehlgeschlagen"
            fi
          else
            echo "🚫 Entwicklung-Deployment übersprungen"
          fi
          # Produktion-Benachrichtigung
          if [ "${{ needs.deploy-prod.result }}" != 'skipped' ]; then
            if [ ${{ needs.deploy-prod.outputs.deployment-status }} ]; then
              echo "✅ Produktions-Deployment erfolgreich"
            else
              echo "❌ Produktions-Deployment fehlgeschlagen"
            fi
          else
            echo "🚫 Produktions-Deployment übersprungen"
          fi
          echo "📊 Deployment abgeschlossen am $(date)"