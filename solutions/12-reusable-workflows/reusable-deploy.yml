name: Wiederverwendbares Deployment

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: 'Target environment for deployment'
      package-name:
        required: true
        type: string
        description: 'Name of the deployment package artifact'
      app-url:
        required: true
        type: string
        description: 'URL where the application will be deployed'
      is-production:
        required: false
        type: boolean
        default: false
        description: 'Whether this is a production deployment'
    outputs:
      deployment-status:
        description: 'Status of the deployment (success/failure)'
        value: ${{ jobs.deploy.outputs.status }}

jobs:
  deploy:
    name: "üöÄ Deployment nach ${{ inputs.environment }}"
    runs-on: ubuntu-latest
    environment: 
      name: ${{ inputs.environment }}
      url: ${{ inputs.app-url }}
    outputs:
      status: ${{ steps.deploy.outputs.status }}
    
    steps:
      - name: "üì• Deployment-Paket herunterladen"
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.package-name }}
          path: ./deployment
      
      - name: "üîç Paketinhalt pr√ºfen"
        run: |
          echo "üìã Inhalt des Deployment-Pakets:"
          ls -la ./deployment/
          echo ""
          echo "üìÑ Build-Informationen:"
          cat ./deployment/build-info.txt
      
      - name: "üîß .NET einrichten (nur Produktion)"
        if: inputs.is-production
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      
      - name: "üöÄ Deployment nach ${{ inputs.environment }}"
        id: deploy
        run: |
          echo "üåç Deployment ins ${{ inputs.environment }}-Environment"
          echo "Paketpfad: ./deployment/"
          echo "Ziel-URL: ${{ inputs.app-url }}"
          
          # Produktionsspezifische Deployment-Schritte ausf√ºhren
          if [ "${{ inputs.is-production }}" == "true" ]; then
            # Deployment simulieren durch Ausf√ºhren der Anwendung
            echo "üöÄ Anwendung wird ausgef√ºhrt..."
            chmod +x ./deployment/SampleApp
            ./deployment/SampleApp
          fi
          
          echo "status=success" >> $GITHUB_OUTPUT
          echo "‚úÖ Deployment erfolgreich abgeschlossen"
      
      - name: "üè∑Ô∏è Release-Tag erstellen (nur Produktion)"
        if: inputs.is-production
        run: |
          echo "Release-Tag f√ºr Produktionsdeployment wird erstellt"
          echo "Tag: v1.0.${{ github.run_number }}"
          echo "Commit: ${{ github.sha }}"

          # GitHub REST API zum Erstellen eines Tags verwenden
          create_tag_response=$(curl -s -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ github.token }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/git/tags \
            -d @- <<EOF
          {
            "tag": "v1.0.${{ github.run_number }}",
            "message": "Tag erstellt durch Deployment",
            "object": "${{ github.sha }}",
            "type": "commit",
            "tagger": {
              "name": "GitHub Actions",
              "email": "actions@github.com"
            },
            "data": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          }
          EOF)
          TAG_SHA=$(echo "$create_tag_response" | grep '"sha":' | head -n 1 | cut -d '"' -f4)
          echo "Tag-Objekt SHA: $TAG_SHA"
          
          # Tag-Referenz erstellen
          curl -s -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ github.token }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/git/refs \
            -o /dev/null \
            -d @- <<EOF
          {
            "ref": "refs/tags/v1.0.${{ github.run_number }}",
            "sha": "$TAG_SHA"
          }
          EOF
          echo "üè∑Ô∏è Release-Tag v1.0.${{ github.run_number }} erfolgreich erstellt"
      
      - name: "üîó Deployment-Zusammenfassung"
        run: |
          echo "## üöÄ Deployment-Zusammenfassung" >> $GITHUB_STEP_SUMMARY
          echo "| Feld | Wert |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | ${{ inputs.environment }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Commit | ${{ github.sha }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Branch | ${{ github.ref_name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Akteur | ${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Ziel-URL | ${{ inputs.app-url }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Status | ‚úÖ Erfolg |" >> $GITHUB_STEP_SUMMARY
