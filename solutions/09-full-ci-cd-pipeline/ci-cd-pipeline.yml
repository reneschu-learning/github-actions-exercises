name: Vollständige CI/CD-Pipeline

run-name: Deployment nach ${{ github.event.inputs.environment || 'development' }} ausgelöst von ${{ github.event_name == 'workflow_dispatch' && github.actor || format('Push von {0} ({1})', github.event.pusher.name, github.sha) }}

on:
  push:
    branches: [ main ]
    paths-ignore: [ '.github/**' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment for deployment'
        required: true
        type: choice
        options:
          - development
          - production
        default: 'development'

env:
  SOLUTION_PATH: './exercises/09-full-ci-cd-pipeline/sample-app/SampleApp.sln'
  PROJECT_PATH: './exercises/09-full-ci-cd-pipeline/sample-app/SampleApp/SampleApp.csproj'
  TEST_PROJECT_PATH: './exercises/09-full-ci-cd-pipeline/sample-app/SampleApp.Tests/SampleApp.Tests.csproj'

jobs:
  build:
    name: "🔨 Anwendung bauen"
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        dotnet-version: ['8.0.x', '9.0.x']
    
    steps:
      - name: "📥 Code auschecken"
        uses: actions/checkout@v4
      
      - name: "🔧 .NET ${{ matrix.dotnet-version }} einrichten"
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
      
      - name: "📦 Abhängigkeiten wiederherstellen"
        run: dotnet restore ${{ env.SOLUTION_PATH }}
      
      - name: "🔨 Anwendung bauen"
        run: dotnet build ${{ env.SOLUTION_PATH }} --configuration Release --no-restore

      - name: "🧪 Unittests ausführen"
        run: |
          dotnet test ${{ env.TEST_PROJECT_PATH }} \
            --configuration Release \
            --logger "trx;LogFileName=test-results.trx" \
            --collect:"XPlat Code Coverage" \
            --results-directory TestResults/
      
      - name: "📊 Testergebnisse veröffentlichen"
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.dotnet-version }}
          path: TestResults/
          retention-days: 1
      
      - name: "📈 Testzusammenfassung anzeigen"
        run: |
          echo "🧪 Testzusammenfassung für .NET ${{ matrix.dotnet-version }}"
          echo "Testdateien befinden sich im TestResults-Verzeichnis"
          find TestResults -name "*.trx" -exec echo "Gefundene Testergebnisdatei: {}" \;
      - name: "📤 Build-Artefakte hochladen"
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.dotnet-version }}
          path: |
            exercises/09-full-ci-cd-pipeline/sample-app/SampleApp/bin/Release/
            exercises/09-full-ci-cd-pipeline/sample-app/SampleApp.Tests/bin/Release/
          retention-days: 1

  package:
    name: "📦 Anwendung paketieren"
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    
    steps:
      - name: "📥 Code auschecken"
        uses: actions/checkout@v4
      
      - name: "🔧 .NET einrichten"
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      
      - name: "📦 Anwendung veröffentlichen"
        run: |
          dotnet publish ${{ env.PROJECT_PATH }} \
            --configuration Release \
            --output ./publish \
            --self-contained false
      
      - name: "📋 Deployment-Paket erstellen"
        run: |
          # Versionsinfo erstellen
          echo "Build-Informationen" > ./publish/build-info.txt
          echo "==================" >> ./publish/build-info.txt
          echo "Build-Datum: $(date)" >> ./publish/build-info.txt
          echo "Commit SHA: ${{ github.sha }}" >> ./publish/build-info.txt
          echo "Branch: ${{ github.ref_name }}" >> ./publish/build-info.txt
          echo "Akteur: ${{ github.actor }}" >> ./publish/build-info.txt
          echo "Workflow: ${{ github.workflow }}" >> ./publish/build-info.txt
      - name: "📤 Deployment-Paket hochladen"
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: ./publish/
          retention-days: 30

  deploy-dev:
    name: "🚀 Deployment nach Entwicklung"
    runs-on: ubuntu-latest
    needs: package
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment: 
      name: ${{ github.event.inputs.environment || 'development' }}
      url: https://dev-sampleapp.example.com
    
    steps:
      - name: "📥 Deployment-Paket herunterladen"
        uses: actions/download-artifact@v4
        with:
          name: deployment-package
          path: ./deployment
      
      - name: "🔍 Paketinhalt prüfen"
        run: |
          echo "📋 Inhalt des Deployment-Pakets:"
          ls -la ./deployment/
          echo ""
          echo "📄 Build-Informationen:"
          cat ./deployment/build-info.txt
      
      - name: "🚀 Deployment nach Entwicklung"
        run: |
          echo "🌍 Deployment ins Entwicklungs-Environment"
          echo "Environment: ${{ github.event.inputs.environment || 'development' }}"
          echo "Paketpfad: ./deployment/"
      
      - name: "🔗 Deployment-Zusammenfassung"
        run: |
          echo "## 🚀 Deployment-Zusammenfassung" >> $GITHUB_STEP_SUMMARY
          echo "| Feld | Wert |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | ${{ github.event.inputs.environment || 'development' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Commit | ${{ github.sha }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Branch | ${{ github.ref_name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Akteur | ${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Status | ✅ Erfolg |" >> $GITHUB_STEP_SUMMARY

  deploy-prod:
    name: "🏭 Deployment nach Produktion"
    runs-on: ubuntu-latest
    needs: deploy-dev
    if: github.ref == 'refs/heads/main' && github.event.inputs.environment == 'production'
    permissions:
      contents: write
    environment: 
      name: production
      url: https://sampleapp.example.com
    
    steps:
      - name: "🔧 .NET einrichten"
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
        
      - name: "📥 Deployment-Paket herunterladen"
        uses: actions/download-artifact@v4
        with:
          name: deployment-package
          path: ./deployment
      
      - name: "🏭 Deployment nach Produktion"
        run: |
          echo "🌍 Deployment ins Produktions-Environment"
          echo "Paketpfad: ./deployment/"
          # Deployment simulieren durch Ausführen der Anwendung
          echo "🚀 Anwendung wird ausgeführt..."
          chmod +x ./deployment/SampleApp
          ./deployment/SampleApp
      - name: "🏷️ Release-Tag erstellen"
        run: |
          echo "Release-Tag für Produktionsdeployment wird erstellt"
          echo "Tag: v1.0.${{ github.run_number }}"
          echo "Commit: ${{ github.sha }}"
          # GitHub REST API zum Erstellen eines Tags verwenden
          create_tag_response=$(curl -s -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ github.token }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/git/tags \
            -d @- <<EOF
          {
            "tag": "v1.0.${{ github.run_number }}1",
            "message": "Tag erstellt durch Deployment",
            "object": "${{ github.sha }}",
            "type": "commit",
            "tagger": {
              "name": "GitHub Actions",
              "email": "actions@github.com"
            },
            "data": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          }
          EOF)
          TAG_SHA=$(echo "$create_tag_response" | grep '"sha":' | head -n 1 | cut -d '"' -f4)
          echo "Tag-Objekt SHA: $TAG_SHA"
          # Tag-Referenz erstellen
          curl -s -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ github.token }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/git/refs \
            -o /dev/null \
            -d @- <<EOF
          {
            "ref": "refs/tags/v1.0.${{ github.run_number }}1",
            "sha": "$TAG_SHA"
          }
          EOF
          echo "🏷️ Release-Tag v1.0.${{ github.run_number }}1 erfolgreich erstellt"

  notify:
    name: "📢 Deployment-Status benachrichtigen"
    runs-on: ubuntu-latest
    needs: [ deploy-dev, deploy-prod ]
    if: always() && (needs.deploy-dev.result != 'skipped' || needs.deploy-prod.result != 'skipped')
    
    steps:
      - name: "📢 Benachrichtigung senden"
        run: |
          echo "📧 Deployment-Benachrichtigungen werden gesendet..."
          # Entwicklung-Benachrichtigung
          if [ "${{ needs.deploy-dev.result }}" == "success" ]; then
            echo "✅ Entwicklung-Deployment erfolgreich"
          elif [ "${{ needs.deploy-dev.result }}" == "failure" ]; then
            echo "❌ Entwicklung-Deployment fehlgeschlagen"
          fi
          # Produktion-Benachrichtigung
          if [ "${{ needs.deploy-prod.result }}" == "success" ]; then
            echo "✅ Produktions-Deployment erfolgreich"
          elif [ "${{ needs.deploy-prod.result }}" == "failure" ]; then
            echo "❌ Produktions-Deployment fehlgeschlagen"
          fi
          echo "📊 Deployment abgeschlossen am $(date)"
