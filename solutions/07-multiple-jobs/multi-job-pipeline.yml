name: Multi-Job CI/CD-Pipeline

on:
  workflow_dispatch:

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      build-version: ${{ steps.version.outputs.version }}
      should-deploy: ${{ steps.check.outputs.deploy }}
    steps:
      - name: Umgebung einrichten
        run: |
          echo "Umgebung wird eingerichtet..."
          echo "Node.js-Version: $(node --version)"
          echo "npm-Version: $(npm --version)"
      
      - name: Version generieren
        id: version
        run: |
          VERSION="1.0.${{ github.run_number }}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Generierte Version: $VERSION"
      
      - name: Deployment-Bedingungen prüfen
        id: check
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "deploy=true" >> $GITHUB_OUTPUT
            echo "Deployment: Aktiviert"
          else
            echo "deploy=false" >> $GITHUB_OUTPUT
            echo "Deployment: Deaktiviert"
          fi

  tests:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Tests ausführen
        run: |
          echo "Tests werden ausgeführt..."
          # Testausführung simulieren
          sleep 10
          echo "✅ Tests bestanden"

  linting:
    needs: setup
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Linting ausführen
        run: |
          echo "Linting läuft auf ${{ matrix.os }}..."
          # Linting simulieren
          sleep 5
          echo "✅ Linting bestanden"

  build:
    needs: [ setup, tests, linting ]
    runs-on: ubuntu-latest
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact }}
    steps:
      - name: Anwendung bauen
        id: build
        run: |
          echo "Anwendungsversion ${{ needs.setup.outputs.build-version }} wird gebaut..."
          # Build-Prozess simulieren
          sleep 20
          ARTIFACT="app-${{ needs.setup.outputs.build-version }}.tar.gz"
          touch $ARTIFACT  # Dummy-Artefaktdatei erstellen
          echo "artifact=$ARTIFACT" >> $GITHUB_OUTPUT
          echo "✅ Build abgeschlossen: $ARTIFACT"
      
      - name: Build-Artefakt hochladen
        uses: actions/upload-artifact@v4
        with:
          name: app
          path: ${{ steps.build.outputs.artifact }}

  deploy:
    needs: [ setup, build ]
    if: needs.setup.outputs.should-deploy == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Build-Artefakt herunterladen
        uses: actions/download-artifact@v4
        with:
          name: app

      - name: Deployment in Produktion
        run: |
          echo "Deployment von ${{ needs.build.outputs.artifact-name }} nach Produktion..."
          echo "Version: ${{ needs.setup.outputs.build-version }}"
          ls ${{ github.workspace }} # Heruntergeladenes Artefakt auflisten
          # Deployment simulieren
          sleep 10
          echo "✅ Deployment erfolgreich abgeschlossen"

  cleanup:
    needs: [ setup, tests, linting, build, deploy ]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Ressourcen bereinigen
        run: |
          echo "Ressourcen werden bereinigt..."
          echo "Setup-Status: ${{ needs.setup.result }}"
          echo "Tests-Status: ${{ needs.tests.result }}"
          echo "Linting-Status: ${{ needs.linting.result }}"
          echo "Build-Status: ${{ needs.build.result }}"
          echo "Deploy-Status: ${{ needs.deploy.result }}"
          echo "✅ Bereinigung abgeschlossen"
