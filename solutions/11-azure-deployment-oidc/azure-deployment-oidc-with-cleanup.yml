name: Azure Deployment mit OIDC (mit Aufr√§umen)

on:
  workflow_dispatch:
    inputs:
      resource-group-name:
        description: 'Name der Azure Ressourcengruppe'
        required: true
      storage-account-name:
        description: 'Name des Azure Storage Accounts'
        required: true
      storage-container-name:
        description: 'Name des Azure Storage Containers'
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Login bei Azure
      uses: azure/login@v2
      with:
        client-id: ${{ vars.AZURE_CLIENT_ID }}
        tenant-id: ${{ vars.AZURE_TENANT_ID }}
        subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}
    
    - name: Azure-Verbindung validieren
      run: |
        echo "üîç Azure-Verbindung wird validiert..."
        az account show
        echo "‚úÖ Erfolgreich mit Azure verbunden"
    - name: Ressourcengruppe erstellen
      run: |
        echo "üèóÔ∏è Ressourcengruppe wird erstellt: ${{ github.event.inputs.resource-group-name }}"
        az group create \
          --name ${{ github.event.inputs.resource-group-name }} \
          --location "West Europe" \
          --tags environment=github-actions \
                 createdBy=github-actions \
                 workflow="${{ github.workflow }}" \
                 runId="${{ github.run_id }}"
        echo "‚úÖ Ressourcengruppe erfolgreich erstellt"
    - name: Storage Account bereitstellen
      run: |
        echo "üíæ Storage Account wird bereitgestellt..."
                
        # Storage Account erstellen
        az storage account create \
          --name ${{ github.event.inputs.storage-account-name }} \
          --resource-group ${{ github.event.inputs.resource-group-name }} \
          --location "West Europe" \
          --sku Standard_LRS \
          --kind StorageV2 \
          --access-tier Hot \
          --https-only true \
          --min-tls-version TLS1_2 \
          --tags environment=github-actions \
                 createdBy=github-actions \
                 workflow="${{ github.workflow }}" \
                 runId="${{ github.run_id }}"
        
        echo "‚úÖ Storage Account erfolgreich erstellt"
    - name: Storage Container erstellen
      run: |
        echo "üìÅ Storage Container wird erstellt..."
        
        az storage container create \
          --name ${{ github.event.inputs.storage-container-name }} \
          --account-name ${{ github.event.inputs.storage-account-name }}
        
        echo "‚úÖ Storage Container erfolgreich erstellt"
    - name: Beispieldatei hochladen
      run: |
        echo "üìÑ Beispieldatei wird in den Storage hochgeladen..."
        
        # Beispieldatei erstellen
        echo "Hallo von GitHub Actions! 
        Deployment-Details:
        - Environment: ${{ github.event.inputs.environment }}
        - Workflow: ${{ github.workflow }}
        - Run ID: ${{ github.run_id }}
        - Zeitstempel: $(date)
        " > sample.txt
        
        # Datei hochladen
        az storage blob upload \
          --file sample.txt \
          --name "deployment-info.txt" \
          --container-name ${{ github.event.inputs.storage-container-name }} \
          --account-name ${{ github.event.inputs.storage-account-name }}
        
        echo "‚úÖ Beispieldatei erfolgreich hochgeladen"
    - name: Deployment verifizieren
      run: |
        echo "üîç Deployment wird verifiziert..."
        
        # Ressourcengruppe pr√ºfen
        echo "Details der Ressourcengruppe:"
        az group show --name ${{ github.event.inputs.resource-group-name }} --output table

        # Storage Account pr√ºfen
        echo -e "\nDetails des Storage Accounts:"
        az storage account show \
          --name ${{ github.event.inputs.storage-account-name }} \
          --resource-group ${{ github.event.inputs.resource-group-name }} \
          --output table
        
        # Blobs im Container auflisten
        echo -e "\nDateien im Storage Container:"
        az storage blob list \
          --container-name ${{ github.event.inputs.storage-container-name }} \
          --account-name ${{ github.event.inputs.storage-account-name }} \
          --output table
        
        echo "‚úÖ Deployment-√úberpr√ºfung abgeschlossen"

cleanup:
  runs-on: ubuntu-latest
  needs: deploy
  # Erstellen Sie diese Umgebung und f√ºgen Sie sich selbst als Pr√ºfer hinzu, um etwas Zeit zu haben, die Ressourcen vor der L√∂schung zu √ºberpr√ºfen
  environment: cleanup
  
  steps:
  - name: Login bei Azure
    uses: azure/login@v2
    with:
      client-id: ${{ vars.AZURE_CLIENT_ID }}
      tenant-id: ${{ vars.AZURE_TENANT_ID }}
      subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}
  
  - name: Ressourcengruppe l√∂schen
    run: |
      echo "üóëÔ∏è Ressourcengruppe wird gel√∂scht: ${{ github.event.inputs.resource-group-name }}"
      az group delete \
        --name ${{ github.event.inputs.resource-group-name }} \
        --yes --no-wait
      echo "‚úÖ Ressourcengruppe erfolgreich gel√∂scht"